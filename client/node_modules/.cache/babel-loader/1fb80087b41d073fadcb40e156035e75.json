{"ast":null,"code":"var _jsxFileName = \"/Users/simonemesiha/Desktop/CSE316-HW3-Spring21-Solution-main/client/src/index.js\";\nimport './css/style.scss';\nimport './css/layout.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nconst cache = new InMemoryCache({\n  /*\n  \tThe cache object ids are generated using the objectID(a string) instead\n  \tof the number id so that objects are refered to consistently across the\n  \tclient and server\n  */\n  dataIdFromObject: object => `${object.__typename}:${object._id}`,\n  typePolicies: {\n    Todolist: {\n      fields: {\n        items: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n\n        }\n      }\n    },\n    Query: {\n      fields: {\n        getAllTodos: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n\n        }\n      }\n    }\n  }\n}); // bad hardcoding, localhost port should match port in the backend's .env file\n\nconst BACKEND_LOCATION = 'http://localhost:4000/graphql';\nconst client = new ApolloClient({\n  uri: BACKEND_LOCATION,\n  connectToDevTools: true,\n  // Credentials: include is necessary to pass along the auth cookies with each server request\n  credentials: 'include',\n  cache: cache\n});\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/Users/simonemesiha/Desktop/CSE316-HW3-Spring21-Solution-main/client/src/index.js"],"names":["React","ReactDOM","App","ApolloProvider","ApolloClient","InMemoryCache","cache","dataIdFromObject","object","__typename","_id","typePolicies","Todolist","fields","items","merge","existing","incoming","Query","getAllTodos","BACKEND_LOCATION","client","uri","connectToDevTools","credentials","render","document","getElementById"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAO,mBAAP;AACA,OAAOA,KAAP,MAAmB,OAAnB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,MAAMC,KAAK,GAAG,IAAID,aAAJ,CAAkB;AAE/B;AACD;AACA;AACA;AACA;AACCE,EAAAA,gBAAgB,EAAEC,MAAM,IAAK,GAAEA,MAAM,CAACC,UAAW,IAAGD,MAAM,CAACE,GAAI,EAPhC;AAQ/BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,MAAM,EAAE;AACPC,QAAAA,KAAK,EAAE;AACNC,UAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACxB,mBAAOA,QAAP;AACA;;AAHK;AADA;AADC,KADG;AAUbC,IAAAA,KAAK,EAAE;AACNL,MAAAA,MAAM,EAAE;AACPM,QAAAA,WAAW,EAAE;AACZJ,UAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACxB,mBAAOA,QAAP;AACA;;AAHW;AADN;AADF;AAVM;AARiB,CAAlB,CAAd,C,CA8BA;;AACA,MAAMG,gBAAgB,GAAG,+BAAzB;AAEA,MAAMC,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC/BkB,EAAAA,GAAG,EAAEF,gBAD0B;AAE/BG,EAAAA,iBAAiB,EAAE,IAFY;AAG/B;AACAC,EAAAA,WAAW,EAAE,SAJkB;AAK/BlB,EAAAA,KAAK,EAAEA;AALwB,CAAjB,CAAf;AAYAL,QAAQ,CAACwB,MAAT,eACC,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGC,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CAHD,CADD,EAQGK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARH","sourcesContent":["import './css/style.scss';\nimport './css/layout.scss';\nimport React \tfrom 'react';\nimport ReactDOM from 'react-dom';\nimport App \t\tfrom './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nconst cache = new InMemoryCache({\n\n\t/*\n\t\tThe cache object ids are generated using the objectID(a string) instead\n\t\tof the number id so that objects are refered to consistently across the\n\t\tclient and server\n\t*/\n\tdataIdFromObject: object => `${object.__typename}:${object._id}`,\n\ttypePolicies: {\n\t\tTodolist: {\n\t\t\tfields: {\n\t\t\t\titems: {\n\t\t\t\t\tmerge(existing, incoming){\n\t\t\t\t\t\treturn incoming\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tQuery: {\n\t\t\tfields: {\n\t\t\t\tgetAllTodos: {\n\t\t\t\t\tmerge(existing, incoming){\n\t\t\t\t\t\treturn incoming\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n});\n\n// bad hardcoding, localhost port should match port in the backend's .env file\nconst BACKEND_LOCATION = 'http://localhost:4000/graphql';\n\nconst client = new ApolloClient({\n\turi: BACKEND_LOCATION,\n\tconnectToDevTools: true,\n\t// Credentials: include is necessary to pass along the auth cookies with each server request\n\tcredentials: 'include',\n\tcache: cache,\n});\n\n\n\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\n\t\t{/* this thing uses react context api to make an appoloclient instance available to the enitre React tree. All components can now access stuff */}\n\t\t<ApolloProvider client={client}>\n\t    \t<App />\n\t\t</ApolloProvider>\n  \t</React.StrictMode>,\n  \tdocument.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}